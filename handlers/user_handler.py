from aiogram import Router, F, Bot
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup, default_state

from config_data.config import Config, load_config
from keyboards.user_keyboard import main_menu, keyboards_get_phone, keyboards_manager_link, keyboards_chanel_link, \
    keyboards_back_main_menu, keyboards_confirm_register
from module.data_base import create_table_users, add_user

import requests
import logging
import re

router = Router()
# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é config
config: Config = load_config()


class Register(StatesGroup):
    count = State()
    name = State()
    number = State()
    address = State()


user_dict = {}


def get_telegram_user(user_id, bot_token):
    url = f'https://api.telegram.org/bot{bot_token}/getChat'
    data = {'chat_id': user_id}
    response = requests.post(url, data=data)
    print(response.json())
    return response.json()


def validate_russian_phone_number(phone_number):
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    # –†–æ—Å—Å–∏–π—Å–∫–∏–µ –Ω–æ–º–µ—Ä–∞ –º–æ–≥—É—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å +7, 8, –∏–ª–∏ –±–µ–∑ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã
    pattern = re.compile(r'^(\+7|8|7)?(\d{10})$')

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω—É
    match = pattern.match(phone_number)

    return bool(match)


@router.message(CommandStart())
async def process_start_command_user(message: Message) -> None:
    logging.info(f'process_start_command_user: {message.chat.id}')
    create_table_users()
    add_user(id_user=message.chat.id,
             user_name=message.from_user.username)
    await message.answer(
        text=f"üôç<b>{message.from_user.first_name}</b> –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ø–æ–º–æ–≥—É –≤–∞–º, —Å —á–µ–≥–æ –Ω–∞—á–Ω–µ–º?üèÆ",
        reply_markup=main_menu(),
        parse_mode='html')


@router.message(F.text == "–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ ‚òéÔ∏è")
async def links(message: Message):
    await message.answer(text="‚úäüèª–í–æ—Ç c –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º:",
                         reply_markup=keyboards_manager_link())


@router.message(F.text == "–ù–∞—à –∫–∞–Ω–∞–ª üßß")
async def links_channel(message: Message):
    logging.info("links_channel")
    await message.answer(f"–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª:", reply_markup=keyboards_chanel_link())


@router.message(F.text == "–û –Ω–∞—Å‚ùì")
async def links_about(message: Message):
    logging.info("links_about")
    await message.answer(text=f"Coco-coal:\n"
                              f"üëâüèª–≠—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —É–≥–æ–ª—å, –∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–¥—É–∫—Ç —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–π –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –¥–≤—É—Ö –ª–µ—Ç, –∞ –∏–º–µ–Ω–Ω–æ —Å —Ñ–µ–≤—Ä–∞–ª—è 2022 –¥–æ 2024 –≥–æ–¥–æ–≤\n"
                              f"üëâüèª–ú—ã –¥–æ–ª–≥–æ —Ä–∞–±–æ—Ç–∞–ª–∏ –Ω–∞–¥ –ø—Ä–æ–¥—É–∫—Ç–æ–º, —Å—Ç—Ä–µ–º—è—Å—å —Å–æ–∑–¥–∞—Ç—å —á—Ç–æ-—Ç–æ –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ\n"
                              f"üëâüèª–£–≥–æ–ª—å –Ω–∞–∏–≤—ã—Å—à–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —Å–æ–±—Ä–∞–Ω–Ω—ã–π –Ω–∞ –æ—Å—Ç—Ä–æ–≤–µ –≤ –¢–∏—Ö–æ–º –æ–∫–µ–∞–Ω–µ. –°–¥–µ–ª–∞–Ω –∏–∑ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –∞ –∏–º–µ–Ω–Ω–æ, –∏–∑ –ª—É—á—à–∏—Ö —Å–æ—Ä—Ç–æ–≤ –∫–æ–∫–æ—Å–æ–≤–æ–π —Å–∫–æ—Ä–ª—É–ø—ã –∏ –±–µ–∑ —Ö–∏–º–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–º–µ—Å–µ–π.\n"
                              f"üëâüèª–ò–¥–µ–∞–ª—å–Ω–∞—è —É–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞ –∫—É–±–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–±–µ—Å–ø–µ—á–∏—Ç—å –¥–æ–ª–≥–æ–µ –≥–æ—Ä–µ–Ω–∏–µ, –∞ —Å–æ—Å—Ç–∞–≤ –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏ –≤—ã–≤–µ—Ä–µ–Ω, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞—Å–ª–∞–¥–∏—Ç—å—Å—è –∫–∞–ª—å—è–Ω–æ–º –∏ –µ–≥–æ –≤–∫—É—Å–æ–º –±–µ–∑ –ª–∏—à–Ω–∏—Ö –ø—Ä–∏–º–µ—Å–µ–π –∏ –∑–∞–ø–∞—Ö–æ–≤.\n")


@router.message(F.text == "–ó–∞–∫–∞–∑–∞—Ç—å —É–≥–æ–ª—å üí∑")
async def register(message: Message, state: FSMContext):
    logging.info(f'register: {message.chat.id}')
    await state.set_state(Register.name)
    await message.answer(text="üí¨ –ö–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–≥ —É–≥–ª—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
                         reply_markup=keyboards_back_main_menu())
    await state.set_state(Register.count)


@router.message(Register.count, lambda message: message.text.isdigit())
async def register_count(message: Message, state: FSMContext):
    logging.info(f'register_count: {message.chat.id}')
    await state.update_data(count=message.text)
    await state.set_state(Register.number)
    await message.answer(text="üí¨–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
                         reply_markup=keyboards_get_phone())


@router.message(Register.count)
async def register_count_error(message: Message):
    logging.info(f'register_count_error: {message.chat.id}')
    await message.answer(text="üí¨–ö–∞–∂–µ—Ç—Å—è –≤—ã –æ—à–∏–±–ª–∏—Å—å –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, –Ω–æ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏."
                              " –ù–∞–ø—Ä–∏–º–µ—Ä: 1, 20, 40, 4000",
                         reply_markup=keyboards_back_main_menu())


@router.message(Register.number)
async def register_number(message: Message, state: FSMContext):
    logging.info(f'register_number: {message.chat.id}')
    if message.contact:
        phone = str(message.contact.phone_number)
    else:
        phone = message.text
        if not validate_russian_phone_number(phone):
            await message.answer(text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")
            return
    await state.update_data(phone=phone)
    await state.set_state(Register.name)
    await message.answer(text="üí¨ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
                         reply_markup=keyboards_back_main_menu())


@router.message(Register.name, lambda message: len(message.text) < 255)
async def register_name(message: Message, state: FSMContext):
    logging.info(f'register_name: {message.chat.id}')
    await state.update_data(name=message.text)
    await state.set_state(Register.address)
    await message.answer(text="üí¨–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å:",
                         reply_markup=keyboards_back_main_menu())


@router.message(Register.name)
async def register_name_error(message: Message):
    logging.info(f'register_name_error: {message.chat.id}')
    await message.answer(text="üí¨–ö–∞–∂–µ—Ç—Å—è –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –±–æ–ª–µ–µ 255 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ –∏–º–µ–Ω–∏")


@router.message(Register.address, lambda message: len(message.text) < 4096)
async def register_address(message: Message, state: FSMContext):
    logging.info(f'register_address: {message.chat.id}')
    await state.update_data(address=message.text)
    user_dict[message.chat.id] = await state.get_data()
    await message.answer(text=f'üìö–í–∞—à–µ –∏–º—è: {user_dict[message.chat.id]["name"]}\n'
                              f'–í–∞—à –∞–¥—Ä–µ—Å: {user_dict[message.chat.id]["address"]}\n'
                              f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user_dict[message.chat.id]["phone"]}\n'
                              f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≥–ª—è: {user_dict[message.chat.id]["count"]} –∫–≥',
                         reply_markup=keyboards_confirm_register())
    await state.set_state(default_state)


@router.callback_query(F.data == "confirm_register")
async def links_about(callback: CallbackQuery, bot: Bot, state: FSMContext):
    logging.info("links_about")
    await callback.message.answer(text='–°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä',
                                  reply_markup=main_menu())
    await callback.message.answer(text='–ê –ø–æ–∫–∞ –ø—Ä–µ–¥–ª–∞–≥–∞—é, –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª, —Ç–∞–º –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ',
                                  reply_markup=keyboards_manager_link())
    user_dict[callback.message.chat.id] = await state.get_data()
    await bot.send_message(chat_id=config.tg_bot.channel,
                           text=f'–ò–º—è –∑–∞–∫–∞–∑—á–∏–∫–∞: {user_dict[callback.message.chat.id]["name"]}\n'
                                f'–ê–¥—Ä–µ—Å –∑–∞–∫–∞–∑—á–∏–∫–∞: {user_dict[callback.message.chat.id]["address"]}\n'
                                f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user_dict[callback.message.chat.id]["phone"]}\n'
                                f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≥–ª—è: {user_dict[callback.message.chat.id]["count"]} –∫–≥')


@router.message(Register.address)
async def register_address_error(message: Message):
    logging.info(f'register_address_error: {message.chat.id}')
    await message.answer(text="üí¨–ö–∞–∂–µ—Ç—Å—è –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –±–æ–ª–µ–µ 4096 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ –∏–º–µ–Ω–∏")


@router.callback_query(F.data == "main_menu")
async def links_about(callback: CallbackQuery):
    logging.info("links_about")
    await callback.message.edit_reply_markup(text='')
    await callback.message.answer(text=f"üôç<b>{callback.from_user.first_name}</b> –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ø–æ–º–æ–≥—É –≤–∞–º, —Å —á–µ–≥–æ –Ω–∞—á–Ω–µ–º?üèÆ",
                                  reply_markup=main_menu(),
                                  parse_mode='html')
